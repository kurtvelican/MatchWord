// Generated by view binder compiler. Do not edit!
package com.mp.matchword.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.mp.matchword.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRoomBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnCreateRoom;

  @NonNull
  public final Button button2;

  @NonNull
  public final Button button5;

  @NonNull
  public final EditText createRoomTxt;

  @NonNull
  public final EditText enterRoom;

  @NonNull
  public final TextView odaGirTxt;

  @NonNull
  public final TextView odaKurTxt;

  private ActivityRoomBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnCreateRoom,
      @NonNull Button button2, @NonNull Button button5, @NonNull EditText createRoomTxt,
      @NonNull EditText enterRoom, @NonNull TextView odaGirTxt, @NonNull TextView odaKurTxt) {
    this.rootView = rootView;
    this.btnCreateRoom = btnCreateRoom;
    this.button2 = button2;
    this.button5 = button5;
    this.createRoomTxt = createRoomTxt;
    this.enterRoom = enterRoom;
    this.odaGirTxt = odaGirTxt;
    this.odaKurTxt = odaKurTxt;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRoomBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRoomBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_room, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRoomBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCreateRoom;
      Button btnCreateRoom = ViewBindings.findChildViewById(rootView, id);
      if (btnCreateRoom == null) {
        break missingId;
      }

      id = R.id.button2;
      Button button2 = ViewBindings.findChildViewById(rootView, id);
      if (button2 == null) {
        break missingId;
      }

      id = R.id.button5;
      Button button5 = ViewBindings.findChildViewById(rootView, id);
      if (button5 == null) {
        break missingId;
      }

      id = R.id.createRoomTxt;
      EditText createRoomTxt = ViewBindings.findChildViewById(rootView, id);
      if (createRoomTxt == null) {
        break missingId;
      }

      id = R.id.enterRoom;
      EditText enterRoom = ViewBindings.findChildViewById(rootView, id);
      if (enterRoom == null) {
        break missingId;
      }

      id = R.id.odaGirTxt;
      TextView odaGirTxt = ViewBindings.findChildViewById(rootView, id);
      if (odaGirTxt == null) {
        break missingId;
      }

      id = R.id.odaKurTxt;
      TextView odaKurTxt = ViewBindings.findChildViewById(rootView, id);
      if (odaKurTxt == null) {
        break missingId;
      }

      return new ActivityRoomBinding((ConstraintLayout) rootView, btnCreateRoom, button2, button5,
          createRoomTxt, enterRoom, odaGirTxt, odaKurTxt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
